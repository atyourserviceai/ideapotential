import { createRequestHandler } from "react-router";
import { routeAgentRequest } from "agents";
import { handleTokenExchange } from "./api/oauth-token-exchange";
import { handleOgImage } from "./api/og-image";
import { AppAgent } from "./agent";
import { UserDO } from "./agent/UserDO";

export { AppAgent, UserDO };

// Env type is provided by worker-configuration.d.ts generated by Wrangler

// Vite injects the server build at this virtual module path
// eslint-disable-next-line import/no-unresolved
type ImportMetaEnv = { env?: { MODE?: string } };
const requestHandler = createRequestHandler(
  () => import("virtual:react-router/server-build"),
  ((import.meta as unknown as ImportMetaEnv).env?.MODE as string) ||
    "production"
);

export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext) {
    const url = new URL(request.url);

    // Let React Router handle /auth/callback via app/routes/auth.callback.tsx

    if (url.pathname === "/api/oauth/config") {
      return new Response(
        JSON.stringify({
          client_id: env.ATYOURSERVICE_OAUTH_CLIENT_ID,
          auth_url: `${env.OAUTH_PROVIDER_BASE_URL}/oauth/authorize`,
          // Return a same-origin token endpoint to avoid browser CORS issues
          token_url: "/api/oauth/token",
        }),
        { headers: { "Content-Type": "application/json" } }
      );
    }

    if (url.pathname === "/api/oauth/token") {
      if (request.method === "OPTIONS") {
        return new Response(null, {
          headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization",
          },
        });
      }
      const resp = await handleTokenExchange(request, env);
      return new Response(await resp.text(), {
        status: resp.status,
        headers: {
          "Content-Type":
            resp.headers.get("Content-Type") || "application/json",
          "Access-Control-Allow-Origin": "*",
        },
      });
    }

    if (url.pathname === "/api/user/info") {
      const auth = request.headers.get("Authorization");
      if (!auth) {
        return new Response(
          JSON.stringify({ error: "Missing Authorization header" }),
          {
            status: 401,
            headers: { "Content-Type": "application/json" },
          }
        );
      }
      const resp = await fetch(`${env.GATEWAY_BASE_URL}/v1/user/info`, {
        method: "GET",
        headers: { Authorization: auth },
      });
      return new Response(await resp.text(), {
        status: resp.status,
        headers: { "Content-Type": "application/json" },
      });
    }

    if (url.pathname === "/api/og-image") {
      return handleOgImage(request, env);
    }

    // Handle project-based routing: /u/{userId}/{projectName}
    const projectMatch = url.pathname.match(/^\/u\/([^\/]+)\/([^\/]+)/);
    if (projectMatch) {
      const [, userId, projectName] = projectMatch;

      // Validate project name (basic validation)
      if (!/^[a-zA-Z0-9-_]+$/.test(projectName)) {
        return new Response("Invalid project name", { status: 400 });
      }

      // For WebSocket upgrades (agent connections), route to specific AppAgent instance
      if (request.headers.get("upgrade") === "websocket") {
        // Create agent name in format: userId/projectName
        const agentName = `${userId}/${projectName}`;

        // Get the AppAgent instance for this specific project
        const agentId = env.AppAgent.idFromName(agentName);
        const agent = env.AppAgent.get(agentId);

        // Forward the WebSocket request to the specific agent
        return agent.fetch(request);
      }

      // For regular HTTP requests to project URLs, check if user can access this project
      // This is where we'll implement access control later
      // For now, just serve the React app which will handle routing client-side
    }

    // Project-based routing will be handled via query parameters instead of URL paths
    // This allows us to work with the existing agents framework

    const agentResp = await routeAgentRequest(request, env, { cors: true });
    if (agentResp) return agentResp;

    return requestHandler(request, { cloudflare: { env, ctx } });
  },
} satisfies ExportedHandler<Env>;

// OAuth callback is handled client-side in app/routes/auth.callback.tsx
